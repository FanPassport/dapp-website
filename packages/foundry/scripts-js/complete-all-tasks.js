import { ethers } from "ethers";

const RPC_URL = "http://127.0.0.1:8545";
const PRIVATE_KEY = process.env.PRIVATE_KEY || "YOUR_PRIVATE_KEY_HERE"; // Anvil account 0
const USER_ADDRESS = "0xFd70b60411692F1a4c0d57046ab64b81D3DC3a83";
const FAN_AI_PASSPORT = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";
const FAN_AI_EXPERIENCE = "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9";

const PASSPORT_ABI = [
  "function ownerOf(uint256 tokenId) view returns (address)",
  "function balanceOf(address owner) view returns (uint256)",
  "function totalSupply() view returns (uint256)"
];

const EXPERIENCE_ABI = [
  "function userToTokenId(address user) view returns (uint256)",
  "function startExperience(uint256 experienceId) external",
  "function completeQuizTask(uint256 experienceId, uint256 taskId, string answer) external",
  "function completeQRCodeTask(uint256 experienceId, uint256 taskId, string qrHash) external",
  "function completeCheckInTask(uint256 experienceId, uint256 taskId) external",
  "function completePhotoTask(uint256 experienceId, uint256 taskId, uint256 tokenId) external",
  "function claimReward(uint256 experienceId) external"
];

async function completeAllTasksAndClaim() {
  const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  const passport = new ethers.Contract(FAN_AI_PASSPORT, PASSPORT_ABI, provider);
  const experience = new ethers.Contract(FAN_AI_EXPERIENCE, EXPERIENCE_ABI, wallet);

  const experienceId = 1;

  // 1. R√©cup√©rer le tokenId li√© √† l'utilisateur
  const tokenId = await experience.userToTokenId(USER_ADDRESS);
  if (tokenId === 0) {
    console.log("‚ùå L'utilisateur n'est pas li√© √† un NFT Passport. Veuillez lier d'abord.");
    return;
  }

  // 2. D√©marrer l'exp√©rience
  try {
    const tx = await experience.startExperience(experienceId);
    await tx.wait();
    console.log("‚úÖ Exp√©rience d√©marr√©e");
  } catch (e) {
    console.log("(Info) Exp√©rience d√©j√† d√©marr√©e ou erreur :", e.message);
  }

  // 3. Compl√©ter les t√¢ches (selon le contrat _createPSGStadiumTour)
  // Task 0: Quiz Historique
  try {
    const tx = await experience.completeQuizTask(experienceId, 0, "1970");
    await tx.wait();
    console.log("‚úÖ Quiz Historique compl√©t√©");
  } catch (e) { console.log("(Info) Quiz Historique d√©j√† fait ou erreur :", e.message); }

  // Task 1: QR Code Entr√©e
  try {
    const tx = await experience.completeQRCodeTask(experienceId, 1, "qr_entrance_parc_princes");
    await tx.wait();
    console.log("‚úÖ QR Code Entr√©e compl√©t√©");
  } catch (e) { console.log("(Info) QR Code d√©j√† fait ou erreur :", e.message); }

  // Task 2: Photo Tribune (n√©cessite owner, donc on skip ici)
  // Task 3: Check-in Vestiaires
  try {
    const tx = await experience.completeCheckInTask(experienceId, 3);
    await tx.wait();
    console.log("‚úÖ Check-in Vestiaires compl√©t√©");
  } catch (e) { console.log("(Info) Check-in d√©j√† fait ou erreur :", e.message); }

  // Task 4: Quiz Joueur
  try {
    const tx = await experience.completeQuizTask(experienceId, 4, "Edinson Cavani");
    await tx.wait();
    console.log("‚úÖ Quiz Joueur compl√©t√©");
  } catch (e) { console.log("(Info) Quiz Joueur d√©j√† fait ou erreur :", e.message); }

  // 4. Claim la r√©compense
  try {
    const tx = await experience.claimReward(experienceId);
    await tx.wait();
    console.log("üéÅ NFT reward claimed!");
  } catch (e) {
    console.log("‚ùå Erreur lors du claim :", e.message);
  }
}

completeAllTasksAndClaim().catch(console.error); 